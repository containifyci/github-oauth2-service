// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: token_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Token_RetrieveInstallation_FullMethodName = "/proto.Token/RetrieveInstallation"
	Token_StoreInstallation_FullMethodName    = "/proto.Token/StoreInstallation"
	Token_RetrieveToken_FullMethodName        = "/proto.Token/RetrieveToken"
	Token_UpdateToken_FullMethodName          = "/proto.Token/UpdateToken"
	Token_StoreToken_FullMethodName           = "/proto.Token/StoreToken"
	Token_RevokeToken_FullMethodName          = "/proto.Token/RevokeToken"
)

// TokenClient is the client API for Token service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenClient interface {
	RetrieveInstallation(ctx context.Context, in *Installation, opts ...grpc.CallOption) (*Installation, error)
	StoreInstallation(ctx context.Context, in *Installation, opts ...grpc.CallOption) (*Installation, error)
	RetrieveToken(ctx context.Context, in *SingleToken, opts ...grpc.CallOption) (*SingleToken, error)
	UpdateToken(ctx context.Context, in *SingleToken, opts ...grpc.CallOption) (*SingleToken, error)
	StoreToken(ctx context.Context, in *SingleToken, opts ...grpc.CallOption) (*SingleToken, error)
	RevokeToken(ctx context.Context, in *SingleToken, opts ...grpc.CallOption) (*RevokeMessage, error)
}

type tokenClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenClient(cc grpc.ClientConnInterface) TokenClient {
	return &tokenClient{cc}
}

func (c *tokenClient) RetrieveInstallation(ctx context.Context, in *Installation, opts ...grpc.CallOption) (*Installation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Installation)
	err := c.cc.Invoke(ctx, Token_RetrieveInstallation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) StoreInstallation(ctx context.Context, in *Installation, opts ...grpc.CallOption) (*Installation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Installation)
	err := c.cc.Invoke(ctx, Token_StoreInstallation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) RetrieveToken(ctx context.Context, in *SingleToken, opts ...grpc.CallOption) (*SingleToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleToken)
	err := c.cc.Invoke(ctx, Token_RetrieveToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) UpdateToken(ctx context.Context, in *SingleToken, opts ...grpc.CallOption) (*SingleToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleToken)
	err := c.cc.Invoke(ctx, Token_UpdateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) StoreToken(ctx context.Context, in *SingleToken, opts ...grpc.CallOption) (*SingleToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SingleToken)
	err := c.cc.Invoke(ctx, Token_StoreToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokenClient) RevokeToken(ctx context.Context, in *SingleToken, opts ...grpc.CallOption) (*RevokeMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeMessage)
	err := c.cc.Invoke(ctx, Token_RevokeToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenServer is the server API for Token service.
// All implementations must embed UnimplementedTokenServer
// for forward compatibility.
type TokenServer interface {
	RetrieveInstallation(context.Context, *Installation) (*Installation, error)
	StoreInstallation(context.Context, *Installation) (*Installation, error)
	RetrieveToken(context.Context, *SingleToken) (*SingleToken, error)
	UpdateToken(context.Context, *SingleToken) (*SingleToken, error)
	StoreToken(context.Context, *SingleToken) (*SingleToken, error)
	RevokeToken(context.Context, *SingleToken) (*RevokeMessage, error)
	mustEmbedUnimplementedTokenServer()
}

// UnimplementedTokenServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTokenServer struct{}

func (UnimplementedTokenServer) RetrieveInstallation(context.Context, *Installation) (*Installation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveInstallation not implemented")
}
func (UnimplementedTokenServer) StoreInstallation(context.Context, *Installation) (*Installation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreInstallation not implemented")
}
func (UnimplementedTokenServer) RetrieveToken(context.Context, *SingleToken) (*SingleToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveToken not implemented")
}
func (UnimplementedTokenServer) UpdateToken(context.Context, *SingleToken) (*SingleToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateToken not implemented")
}
func (UnimplementedTokenServer) StoreToken(context.Context, *SingleToken) (*SingleToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreToken not implemented")
}
func (UnimplementedTokenServer) RevokeToken(context.Context, *SingleToken) (*RevokeMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeToken not implemented")
}
func (UnimplementedTokenServer) mustEmbedUnimplementedTokenServer() {}
func (UnimplementedTokenServer) testEmbeddedByValue()               {}

// UnsafeTokenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenServer will
// result in compilation errors.
type UnsafeTokenServer interface {
	mustEmbedUnimplementedTokenServer()
}

func RegisterTokenServer(s grpc.ServiceRegistrar, srv TokenServer) {
	// If the following call pancis, it indicates UnimplementedTokenServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Token_ServiceDesc, srv)
}

func _Token_RetrieveInstallation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Installation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).RetrieveInstallation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Token_RetrieveInstallation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).RetrieveInstallation(ctx, req.(*Installation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_StoreInstallation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Installation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).StoreInstallation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Token_StoreInstallation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).StoreInstallation(ctx, req.(*Installation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_RetrieveToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).RetrieveToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Token_RetrieveToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).RetrieveToken(ctx, req.(*SingleToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_UpdateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).UpdateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Token_UpdateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).UpdateToken(ctx, req.(*SingleToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_StoreToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).StoreToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Token_StoreToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).StoreToken(ctx, req.(*SingleToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Token_RevokeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingleToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServer).RevokeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Token_RevokeToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServer).RevokeToken(ctx, req.(*SingleToken))
	}
	return interceptor(ctx, in, info, handler)
}

// Token_ServiceDesc is the grpc.ServiceDesc for Token service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Token_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Token",
	HandlerType: (*TokenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveInstallation",
			Handler:    _Token_RetrieveInstallation_Handler,
		},
		{
			MethodName: "StoreInstallation",
			Handler:    _Token_StoreInstallation_Handler,
		},
		{
			MethodName: "RetrieveToken",
			Handler:    _Token_RetrieveToken_Handler,
		},
		{
			MethodName: "UpdateToken",
			Handler:    _Token_UpdateToken_Handler,
		},
		{
			MethodName: "StoreToken",
			Handler:    _Token_StoreToken_Handler,
		},
		{
			MethodName: "RevokeToken",
			Handler:    _Token_RevokeToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "token_service.proto",
}
